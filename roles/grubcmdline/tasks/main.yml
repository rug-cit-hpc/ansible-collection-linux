---
- name: Check current kernel command line args
  ansible.builtin.command: cat /proc/cmdline
  register: result
  changed_when: false
  check_mode: false

- name: Determine if we need to update
  ansible.builtin.set_fact:
    old_cmdline: "{{ result.stdout.split() | select('search', kernel_cmdline_regex) | sort | list }}"

- name: Notify reboot handler
  ansible.builtin.debug:
    msg: Old command line was {{ result.stdout }}
  changed_when: old_cmdline != kernel_cmdline | select() | sort | list
  notify: "{{ kernel_restart_handler }}"

- name: Look for the last occurance of GRUB_CMDLINE_LINUX_DEFAULT in grub config
  # In some environments, the grub config contained multiple lines defining this
  # value; the last one would "win", but the change in this play would be based
  # on the first one that was found, with interesting consequences. Hence this
  # slightly less pure but more reliable way of fetching that line.
  ansible.builtin.shell:
    cmd: >-
      set -o pipefail
      && grep -E '^GRUB_CMDLINE_LINUX_DEFAULT' /etc/default/grub | tail -1
    args:
      executable: /usr/bin/bash
  register: grub_cmdline_linux_default
  changed_when: grub_cmdline_linux_default.rc != 0

- name: Set fact containing the contents of GRUB_CMDLINE_LINUX_DEFAULT
  ansible.builtin.set_fact:
    grub_cmdline_linux_default: >-
      {{ grub_cmdline_linux_default.stdout | regex_search('^GRUB_CMDLINE_LINUX_DEFAULT.*$', multiline=True) | regex_replace('^GRUB_CMDLINE_LINUX_DEFAULT="(.*)"$', '\1') }}
- name: Display GRUB_CMDLINE_DEFAULT
  ansible.builtin.debug:
    var: grub_cmdline_linux_default

- name: Determine which parameters need removing
  # We use a regex here so you can remove parameters regardless of their value, e.g to remove iommu=on you
  # could use the regex: ^iommu=
  ansible.builtin.set_fact:
    grub_cmdline_linux_remove: "{{ grub_cmdline_linux_default.split() | select('search', kernel_cmdline_remove_regex) | list }}"

- name: Display parameters to be removed
  ansible.builtin.debug:
    var: grub_cmdline_linux_remove

- name: Updated kernel cmd line params
  ansible.builtin.set_fact:
    grub_cmdline_linux_new: "{{ grub_cmdline_linux_default.split() | difference(grub_cmdline_linux_remove) + kernel_cmdline | select() }}"

- name: Display newly computed GRUB_CMDLINE_DEFAULT
  ansible.builtin.debug:
    var: grub_cmdline_linux_new

- name: Set GRUB_CMDLINE_LINUX_DEFAULT in /etc/default/grub
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: ^GRUB_CMDLINE_LINUX_DEFAULT
    line: GRUB_CMDLINE_LINUX_DEFAULT="{{ grub_cmdline_linux_new | join(' ') }}"
    backup: "{{ backup_grub_config_file }}"
  become: true
  when: grub_cmdline_linux_default.split() | sort | list != grub_cmdline_linux_new | sort | list

- name: Generate new grub-config (RedHat <= 8.x)
  ansible.builtin.command: grub2-mkconfig
  register: grub_mkconfig_result
  become: true
  changed_when: false
  when:
    - ansible_facts.os_family == "RedHat"
    - ansible_facts.distribution_version is version('8.0', '<=')

- name: Replace current grub config (RedHat <= 8.x)
  ansible.builtin.copy:
    backup: "{{ backup_grub_config_file }}"
    # /etc/grub2.cfg -> ../boot/grub2/grub.cfg
    follow: true
    content: "{{ grub_mkconfig_result.stdout }}"
    dest: "{{ item }}"
    mode: "0660"
  become: true
  register: grub_update_result
  with_items:
    - /etc/grub2.cfg
    - /etc/grub2-efi.cfg
  notify: "{{ kernel_restart_handler }}"
  when:
    - ansible_facts.os_family == "RedHat"
    - ansible_facts.distribution_version is version('8.0', '<=')

- name: Generate new grub config (Ubuntu/Debian) # noqa: no-changed-when
  ansible.builtin.command: /usr/sbin/update-grub
  become: true
  when: ansible_facts.os_family == "Debian"

- name: Generate new grub-config (RedHat >= 9.x)
  # NOTE: This is the new fangled way: https://unix.stackexchange.com/questions/557841/what-is-the-correct-way-to-handle-default-kernelopts-in-fedora-31
  # As grub reads configuration from /boot/loader/entries/.
  ansible.builtin.command: grubby --update-kernel=ALL --args='{{ grub_cmdline_linux_new | join(" ") }}' --remove-args '{{ grub_cmdline_linux_remove | join(" ") }}'
  changed_when: false
  become: true
  when:
    - ansible_facts.os_family == "RedHat"
    - ansible_facts.distribution_version is version('9.0', '>=')
